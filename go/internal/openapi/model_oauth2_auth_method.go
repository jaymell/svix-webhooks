/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Oauth2AuthMethod - struct for Oauth2AuthMethod
type Oauth2AuthMethod struct {
	Oauth2AuthMethodOneOf *Oauth2AuthMethodOneOf
	Oauth2AuthMethodOneOf1 *Oauth2AuthMethodOneOf1
	Oauth2AuthMethodOneOf2 *Oauth2AuthMethodOneOf2
}

// Oauth2AuthMethodOneOfAsOauth2AuthMethod is a convenience function that returns Oauth2AuthMethodOneOf wrapped in Oauth2AuthMethod
func Oauth2AuthMethodOneOfAsOauth2AuthMethod(v *Oauth2AuthMethodOneOf) Oauth2AuthMethod {
	return Oauth2AuthMethod{ Oauth2AuthMethodOneOf: v}
}

// Oauth2AuthMethodOneOf1AsOauth2AuthMethod is a convenience function that returns Oauth2AuthMethodOneOf1 wrapped in Oauth2AuthMethod
func Oauth2AuthMethodOneOf1AsOauth2AuthMethod(v *Oauth2AuthMethodOneOf1) Oauth2AuthMethod {
	return Oauth2AuthMethod{ Oauth2AuthMethodOneOf1: v}
}

// Oauth2AuthMethodOneOf2AsOauth2AuthMethod is a convenience function that returns Oauth2AuthMethodOneOf2 wrapped in Oauth2AuthMethod
func Oauth2AuthMethodOneOf2AsOauth2AuthMethod(v *Oauth2AuthMethodOneOf2) Oauth2AuthMethod {
	return Oauth2AuthMethod{ Oauth2AuthMethodOneOf2: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Oauth2AuthMethod) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Oauth2AuthMethodOneOf
	err = json.Unmarshal(data, &dst.Oauth2AuthMethodOneOf)
	if err == nil {
		jsonOauth2AuthMethodOneOf, _ := json.Marshal(dst.Oauth2AuthMethodOneOf)
		if string(jsonOauth2AuthMethodOneOf) == "{}" { // empty struct
			dst.Oauth2AuthMethodOneOf = nil
		} else {
			match++
		}
	} else {
		dst.Oauth2AuthMethodOneOf = nil
	}

	// try to unmarshal data into Oauth2AuthMethodOneOf1
	err = json.Unmarshal(data, &dst.Oauth2AuthMethodOneOf1)
	if err == nil {
		jsonOauth2AuthMethodOneOf1, _ := json.Marshal(dst.Oauth2AuthMethodOneOf1)
		if string(jsonOauth2AuthMethodOneOf1) == "{}" { // empty struct
			dst.Oauth2AuthMethodOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.Oauth2AuthMethodOneOf1 = nil
	}

	// try to unmarshal data into Oauth2AuthMethodOneOf2
	err = json.Unmarshal(data, &dst.Oauth2AuthMethodOneOf2)
	if err == nil {
		jsonOauth2AuthMethodOneOf2, _ := json.Marshal(dst.Oauth2AuthMethodOneOf2)
		if string(jsonOauth2AuthMethodOneOf2) == "{}" { // empty struct
			dst.Oauth2AuthMethodOneOf2 = nil
		} else {
			match++
		}
	} else {
		dst.Oauth2AuthMethodOneOf2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Oauth2AuthMethodOneOf = nil
		dst.Oauth2AuthMethodOneOf1 = nil
		dst.Oauth2AuthMethodOneOf2 = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(Oauth2AuthMethod)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(Oauth2AuthMethod)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Oauth2AuthMethod) MarshalJSON() ([]byte, error) {
	if src.Oauth2AuthMethodOneOf != nil {
		return json.Marshal(&src.Oauth2AuthMethodOneOf)
	}

	if src.Oauth2AuthMethodOneOf1 != nil {
		return json.Marshal(&src.Oauth2AuthMethodOneOf1)
	}

	if src.Oauth2AuthMethodOneOf2 != nil {
		return json.Marshal(&src.Oauth2AuthMethodOneOf2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Oauth2AuthMethod) GetActualInstance() (interface{}) {
	if obj.Oauth2AuthMethodOneOf != nil {
		return obj.Oauth2AuthMethodOneOf
	}

	if obj.Oauth2AuthMethodOneOf1 != nil {
		return obj.Oauth2AuthMethodOneOf1
	}

	if obj.Oauth2AuthMethodOneOf2 != nil {
		return obj.Oauth2AuthMethodOneOf2
	}

	// all schemas are nil
	return nil
}

type NullableOauth2AuthMethod struct {
	value *Oauth2AuthMethod
	isSet bool
}

func (v NullableOauth2AuthMethod) Get() *Oauth2AuthMethod {
	return v.value
}

func (v *NullableOauth2AuthMethod) Set(val *Oauth2AuthMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableOauth2AuthMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableOauth2AuthMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOauth2AuthMethod(val *Oauth2AuthMethod) *NullableOauth2AuthMethod {
	return &NullableOauth2AuthMethod{value: val, isSet: true}
}

func (v NullableOauth2AuthMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOauth2AuthMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


